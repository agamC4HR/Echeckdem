// <auto-generated />
using System;
using Echeckdem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Echeckdem.Migrations
{
    [DbContext(typeof(DbEcheckContext))]
    partial class DbEcheckContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Echeckdem.Models.Act", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("CODE")
                        .IsFixedLength();

                    b.Property<int?>("Aactive")
                        .HasColumnType("int")
                        .HasColumnName("AACTIVE");

                    b.Property<string>("Alegtype")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALEGTYPE")
                        .IsFixedLength();

                    b.Property<string>("Appl")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("APPL")
                        .IsFixedLength();

                    b.Property<string>("Applicability")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("APPLICABILITY");

                    b.Property<string>("Atype")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("ATYPE")
                        .IsFixedLength();

                    b.Property<string>("Filename")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("FILENAME")
                        .IsFixedLength();

                    b.Property<string>("Lastamend")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("char(200)")
                        .HasColumnName("LASTAMEND")
                        .IsFixedLength();

                    b.Property<string>("Legtype")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("LEGTYPE")
                        .IsFixedLength();

                    b.Property<string>("Lname")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("char(150)")
                        .HasColumnName("LNAME")
                        .IsFixedLength();

                    b.Property<int?>("Nochk")
                        .HasColumnType("int")
                        .HasColumnName("NOCHK");

                    b.Property<int?>("Nodoc")
                        .HasColumnType("int")
                        .HasColumnName("NODOC");

                    b.Property<string>("Objectives")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("OBJECTIVES");

                    b.Property<string>("Otherleg")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("char(250)")
                        .HasColumnName("OTHERLEG")
                        .IsFixedLength();

                    b.Property<string>("Parleg")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("PARLEG")
                        .IsFixedLength();

                    b.Property<string>("Sname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("SNAME")
                        .IsFixedLength();

                    b.Property<string>("Stcode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("STCODE")
                        .IsFixedLength();

                    b.Property<string>("Year")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("YEAR")
                        .IsFixedLength();

                    b.HasKey("Code");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Code"), false);

                    b.HasIndex(new[] { "Code", "Sname", "Lname" }, "acts0");

                    b.HasIndex(new[] { "Code", "Atype", "Stcode", "Sname", "Year" }, "acts00");

                    b.ToTable("ACTS", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Alink", b =>
                {
                    b.Property<string>("Acode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("ACODE")
                        .IsFixedLength();

                    b.Property<string>("Lcode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("LCODE")
                        .IsFixedLength();

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("MODULE")
                        .IsFixedLength();

                    b.ToTable("ALINKS", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Audtrail", b =>
                {
                    b.Property<int>("Tindex")
                        .HasColumnType("int")
                        .HasColumnName("TINDEX");

                    b.Property<string>("Activity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("ACTIVITY")
                        .IsFixedLength();

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("char(200)")
                        .HasColumnName("DETAILS")
                        .IsFixedLength();

                    b.Property<string>("Origin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("ORIGIN")
                        .IsFixedLength();

                    b.Property<DateTime?>("Tdate")
                        .HasColumnType("datetime")
                        .HasColumnName("TDATE");

                    b.Property<string>("Ttable")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("TTABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("Ttime")
                        .HasColumnType("datetime")
                        .HasColumnName("TTIME");

                    b.Property<string>("Uids")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("UIDS")
                        .IsFixedLength();

                    b.HasKey("Tindex");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Tindex"), false);

                    b.ToTable("AUDTRAIL", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.BocwScope", b =>
                {
                    b.Property<string>("ScopeId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ScopeID");

                    b.Property<int>("ScopeActive")
                        .HasColumnType("int");

                    b.Property<string>("ScopeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ScopeId");

                    b.ToTable("BOCW_SCOPE", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Calendar", b =>
                {
                    b.Property<decimal>("Oblig")
                        .HasColumnType("decimal(6, 0)")
                        .HasColumnName("OBLIG");

                    b.Property<DateTime>("Obldate")
                        .HasColumnType("datetime")
                        .HasColumnName("OBLDATE");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("REMARKS");

                    b.Property<DateTime?>("Warndate")
                        .HasColumnType("datetime")
                        .HasColumnName("WARNDATE");

                    b.HasKey("Oblig", "Obldate");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Oblig", "Obldate"), false);

                    b.ToTable("CALENDAR", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Contact", b =>
                {
                    b.Property<string>("Userid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("USERID")
                        .IsFixedLength();

                    b.Property<string>("Altemail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("ALTEMAIL")
                        .IsFixedLength();

                    b.Property<string>("Ccode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("CCODE")
                        .IsFixedLength();

                    b.Property<string>("Desig")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("char(75)")
                        .HasColumnName("DESIG")
                        .IsFixedLength();

                    b.Property<string>("Emailid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("EMAILID")
                        .IsFixedLength();

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("FAX")
                        .IsFixedLength();

                    b.Property<string>("Fname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("FNAME")
                        .IsFixedLength();

                    b.Property<string>("Fullname")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("char(45)")
                        .HasColumnName("FULLNAME")
                        .IsFixedLength();

                    b.Property<DateTime?>("Lastpass")
                        .HasColumnType("datetime")
                        .HasColumnName("LASTPASS");

                    b.Property<string>("Lname")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .HasColumnName("LNAME")
                        .IsFixedLength();

                    b.Property<string>("Location")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("LOCATION")
                        .IsFixedLength();

                    b.Property<string>("Orgcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ORGCODE")
                        .IsFixedLength();

                    b.Property<string>("Pass")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("PASS")
                        .IsFixedLength();

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("PHONE")
                        .IsFixedLength();

                    b.Property<string>("Stcode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("STCODE")
                        .IsFixedLength();

                    b.Property<decimal?>("Uactive")
                        .HasColumnType("decimal(2, 0)")
                        .HasColumnName("UACTIVE");

                    b.Property<decimal?>("Userlevel")
                        .HasColumnType("decimal(5, 0)")
                        .HasColumnName("USERLEVEL");

                    b.HasKey("Userid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Userid"), false);

                    b.ToTable("CONTACT", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.ContributionViewModel", b =>
                {
                    b.Property<int>("Cyear")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Depdate")
                        .HasColumnType("date");

                    b.Property<string>("LCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Cuser", b =>
                {
                    b.Property<string>("Userid")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("char(60)")
                        .HasColumnName("userid")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Crdate")
                        .HasColumnType("date")
                        .HasColumnName("crdate");

                    b.Property<string>("Defstate")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("defstate")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Expdate")
                        .HasColumnType("date")
                        .HasColumnName("expdate");

                    b.Property<string>("Mail")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("mail");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("password");

                    b.Property<int?>("Uactive")
                        .HasColumnType("int")
                        .HasColumnName("uactive");

                    b.Property<int?>("Ulevel")
                        .HasColumnType("int")
                        .HasColumnName("ulevel");

                    b.Property<string>("Uname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("uname")
                        .IsFixedLength();

                    b.Property<int>("Uno")
                        .HasColumnType("int")
                        .HasColumnName("uno");

                    b.Property<string>("Uorg")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("uorg")
                        .IsFixedLength();

                    b.Property<string>("Ustates")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("ustates")
                        .IsFixedLength();

                    b.Property<string>("Utype")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("utype")
                        .IsFixedLength();

                    b.HasKey("Userid");

                    b.ToTable("CUSERS", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Cusers2", b =>
                {
                    b.Property<DateOnly?>("Ucrdate")
                        .HasColumnType("date")
                        .HasColumnName("ucrdate");

                    b.Property<DateOnly?>("Uexdate")
                        .HasColumnType("date")
                        .HasColumnName("uexdate");

                    b.Property<int>("Uno")
                        .HasColumnType("int")
                        .HasColumnName("uno");

                    b.Property<int?>("Utype")
                        .HasColumnType("int")
                        .HasColumnName("utype");

                    b.Property<int?>("Utype1")
                        .HasColumnType("int")
                        .HasColumnName("utype1");

                    b.ToTable("CUSERS2", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Doclink", b =>
                {
                    b.Property<decimal>("Ocode")
                        .HasColumnType("decimal(5, 0)")
                        .HasColumnName("OCODE");

                    b.Property<string>("Dcode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("DCODE")
                        .IsFixedLength();

                    b.HasKey("Ocode", "Dcode");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Ocode", "Dcode"), false);

                    b.ToTable("DOCLINKS", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Doclist", b =>
                {
                    b.Property<string>("Dcode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("DCODE")
                        .IsFixedLength();

                    b.Property<string>("Acode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("ACODE")
                        .IsFixedLength();

                    b.Property<string>("Dcat")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("DCAT")
                        .IsFixedLength();

                    b.Property<string>("Ddesc")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("char(150)")
                        .HasColumnName("DDESC")
                        .IsFixedLength();

                    b.Property<int?>("Dindex")
                        .HasColumnType("int")
                        .HasColumnName("DINDEX");

                    b.Property<string>("Dirname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("DIRNAME")
                        .IsFixedLength();

                    b.Property<string>("Docname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("DOCNAME")
                        .IsFixedLength();

                    b.Property<string>("Dtitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("DTITLE")
                        .IsFixedLength();

                    b.Property<string>("Dtype")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("DTYPE")
                        .IsFixedLength();

                    b.Property<string>("Oacode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("OACODE")
                        .IsFixedLength();

                    b.HasKey("Dcode");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Dcode"), false);

                    b.ToTable("DOCLIST", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Dorg", b =>
                {
                    b.Property<int?>("Active")
                        .HasColumnType("int")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("Lenddate")
                        .HasColumnType("datetime")
                        .HasColumnName("LENDDATE");

                    b.Property<DateTime?>("Lstartdate")
                        .HasColumnType("datetime")
                        .HasColumnName("LSTARTDATE");

                    b.Property<string>("Orgcode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("ORGCODE")
                        .IsFixedLength();

                    b.Property<string>("Orgdesc")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("ORGDESC")
                        .IsFixedLength();

                    b.Property<string>("States")
                        .HasColumnType("text")
                        .HasColumnName("STATES");

                    b.ToTable("DORG", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.EchkTrail", b =>
                {
                    b.Property<int>("Tindex")
                        .HasColumnType("int")
                        .HasColumnName("TINDEX");

                    b.Property<string>("Activity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("ACTIVITY")
                        .IsFixedLength();

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("char(200)")
                        .HasColumnName("DETAILS")
                        .IsFixedLength();

                    b.Property<string>("Origin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("ORIGIN")
                        .IsFixedLength();

                    b.Property<DateTime?>("Tdate")
                        .HasColumnType("datetime")
                        .HasColumnName("TDATE");

                    b.Property<string>("Ttable")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("TTABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("Ttime")
                        .HasColumnType("datetime")
                        .HasColumnName("TTIME");

                    b.Property<string>("Uids")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("UIDS")
                        .IsFixedLength();

                    b.HasKey("Tindex");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Tindex"), false);

                    b.ToTable("echkTrail", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Emaillist", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.HasKey("Email");

                    b.ToTable("emaillist", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.EnquiryTable", b =>
                {
                    b.Property<int>("Enid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ENID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Enid"));

                    b.Property<DateOnly>("Edate")
                        .HasColumnType("date");

                    b.Property<string>("Edesignation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Eemail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Eintrest")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Emessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Ename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Eorganization")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Ereference")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Enid");

                    b.ToTable("ENQUIRY_table", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ftlink", b =>
                {
                    b.Property<string>("Seccode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("SECCODE")
                        .IsFixedLength();

                    b.Property<string>("Module")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("MODULE")
                        .IsFixedLength();

                    b.Property<string>("Lcode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("LCODE")
                        .IsFixedLength();

                    b.HasKey("Seccode", "Module", "Lcode");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Seccode", "Module", "Lcode"), false);

                    b.ToTable("FTLINK", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ftlink1", b =>
                {
                    b.Property<decimal>("Ocode")
                        .HasColumnType("decimal(5, 0)")
                        .HasColumnName("OCODE");

                    b.Property<string>("Seccode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("SECCODE")
                        .IsFixedLength();

                    b.HasKey("Ocode", "Seccode");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Ocode", "Seccode"), false);

                    b.ToTable("FTLINKS", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Fulltext", b =>
                {
                    b.Property<string>("Seccode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("SECCODE")
                        .IsFixedLength();

                    b.Property<string>("Act")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("ACT")
                        .IsFixedLength();

                    b.Property<string>("Chapter")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("CHAPTER")
                        .IsFixedLength();

                    b.Property<string>("Ftext")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FTEXT");

                    b.Property<string>("Section")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("SECTION")
                        .IsFixedLength();

                    b.Property<double?>("Sindex")
                        .HasColumnType("float")
                        .HasColumnName("SINDEX");

                    b.Property<string>("Title")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("char(120)")
                        .HasColumnName("TITLE")
                        .IsFixedLength();

                    b.HasKey("Seccode");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Seccode"), false);

                    b.HasIndex(new[] { "Act" }, "ACT");

                    b.HasIndex(new[] { "Sindex" }, "SINDEX");

                    b.ToTable("FULLTEXT", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Llauth", b =>
                {
                    b.Property<string>("Aucode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("AUCODE")
                        .IsFixedLength();

                    b.Property<string>("Acode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("ACODE")
                        .IsFixedLength();

                    b.Property<string>("Auth")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("AUTH")
                        .IsFixedLength();

                    b.Property<string>("Duties")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .HasColumnName("DUTIES")
                        .IsFixedLength();

                    b.Property<string>("Jurisdiction")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("JURISDICTION")
                        .IsFixedLength();

                    b.Property<string>("Powers")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .HasColumnName("POWERS")
                        .IsFixedLength();

                    b.Property<string>("Section")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("SECTION")
                        .IsFixedLength();

                    b.HasKey("Aucode");

                    b.ToTable("LLAUTH", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Lldef", b =>
                {
                    b.Property<string>("Seccode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SECCODE");

                    b.Property<string>("Acode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ACODE");

                    b.Property<string>("Dtext")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DTEXT");

                    b.Property<string>("Section")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("SECTION");

                    b.Property<string>("Title")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("TITLE");

                    b.HasKey("Seccode");

                    b.ToTable("LLDEF", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Llfaq", b =>
                {
                    b.Property<string>("Cat1")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .HasColumnName("CAT1")
                        .IsFixedLength();

                    b.Property<string>("Cat2")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .HasColumnName("CAT2")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Crdate")
                        .HasColumnType("date")
                        .HasColumnName("CRDATE");

                    b.Property<int?>("Qactive")
                        .HasColumnType("int")
                        .HasColumnName("QACTIVE");

                    b.Property<string>("Qanswer")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("QANSWER");

                    b.Property<int>("Qcode")
                        .HasColumnType("int")
                        .HasColumnName("QCODE");

                    b.Property<string>("Ques")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("QUES");

                    b.ToTable("LLFAQ", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Llink", b =>
                {
                    b.Property<DateOnly?>("Crdate")
                        .HasColumnType("date")
                        .HasColumnName("CRDATE");

                    b.Property<int?>("Lactive")
                        .HasColumnType("int")
                        .HasColumnName("LACTIVE");

                    b.Property<string>("Lcat")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LCAT");

                    b.Property<string>("Ldesc")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LDESC");

                    b.Property<int>("Lid")
                        .HasColumnType("int")
                        .HasColumnName("LID");

                    b.Property<string>("Ltitle")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LTITLE");

                    b.Property<string>("Lurl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("LURL");

                    b.ToTable("LLINKS", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Lloff", b =>
                {
                    b.Property<string>("Offcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("OFFCODE")
                        .IsFixedLength();

                    b.Property<string>("Acode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("ACODE")
                        .IsFixedLength();

                    b.Property<int?>("Maxfine")
                        .HasColumnType("int")
                        .HasColumnName("MAXFINE");

                    b.Property<int?>("Maxprison")
                        .HasColumnType("int")
                        .HasColumnName("MAXPRISON");

                    b.Property<string>("Offence")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .HasColumnName("OFFENCE")
                        .IsFixedLength();

                    b.Property<string>("Penalty")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("char(255)")
                        .HasColumnName("PENALTY")
                        .IsFixedLength();

                    b.Property<string>("Section")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("SECTION")
                        .IsFixedLength();

                    b.HasKey("Offcode");

                    b.ToTable("LLOFF", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Location", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<string>("Location1")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("location")
                        .IsFixedLength();

                    b.ToTable("LOcation", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Mastreg", b =>
                {
                    b.Property<string>("Rtype")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("RTYPE")
                        .IsFixedLength();

                    b.Property<string>("Rdesc")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .HasColumnName("RDESC")
                        .IsFixedLength();

                    b.HasKey("Rtype");

                    b.ToTable("MASTREG", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Maststate", b =>
                {
                    b.Property<string>("Stactive")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("STACTIVE")
                        .IsFixedLength();

                    b.Property<string>("Statedesc")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .HasColumnName("STATEDESC")
                        .IsFixedLength();

                    b.Property<string>("Stateid")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("STATEID")
                        .IsFixedLength();

                    b.HasIndex(new[] { "Stateid", "Statedesc" }, "notistate")
                        .IsUnique()
                        .HasFilter("[STATEDESC] IS NOT NULL");

                    b.ToTable("MASTSTATES", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Mwcat", b =>
                {
                    b.Property<string>("Stid")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("stid")
                        .IsFixedLength();

                    b.Property<int>("Catid")
                        .HasColumnType("int")
                        .HasColumnName("catid");

                    b.Property<string>("Catdesc")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("catdesc");

                    b.Property<string>("Catgrp")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("catgrp")
                        .IsFixedLength();

                    b.Property<int?>("Catlnk")
                        .HasColumnType("int")
                        .HasColumnName("catlnk");

                    b.Property<string>("Catname")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("char(75)")
                        .HasColumnName("catname")
                        .IsFixedLength();

                    b.HasKey("Stid", "Catid")
                        .HasName("PK_MWCAT_1");

                    b.ToTable("MWCAT", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Mwdatum", b =>
                {
                    b.Property<string>("Stid")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("STID")
                        .IsFixedLength();

                    b.Property<int>("Catid")
                        .HasColumnType("int")
                        .HasColumnName("catid");

                    b.Property<DateOnly>("Stdate")
                        .HasColumnType("date")
                        .HasColumnName("stdate");

                    b.Property<double?>("Basic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("basic");

                    b.Property<double?>("Da")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("da");

                    b.Property<double?>("Daily")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("daily");

                    b.Property<DateOnly?>("Endate")
                        .HasColumnType("date")
                        .HasColumnName("endate");

                    b.Property<double?>("Hra")
                        .HasColumnType("float")
                        .HasColumnName("hra");

                    b.Property<double?>("Monthly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("monthly");

                    b.Property<DateOnly?>("Notdate")
                        .HasColumnType("date")
                        .HasColumnName("notdate");

                    b.Property<string>("Notfile")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("char(80)")
                        .HasColumnName("notfile")
                        .IsFixedLength();

                    b.Property<double?>("Other")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("other");

                    b.Property<double?>("Spallowence")
                        .HasColumnType("float")
                        .HasColumnName("spallowence");

                    b.Property<double?>("Z2b")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z2b");

                    b.Property<double?>("Z2d")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z2d");

                    b.Property<double?>("Z2da")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z2da");

                    b.Property<double?>("Z2hra")
                        .HasColumnType("float")
                        .HasColumnName("z2hra");

                    b.Property<double?>("Z2m")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z2m");

                    b.Property<double?>("Z2other")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z2other");

                    b.Property<double?>("Z2spallowence")
                        .HasColumnType("float")
                        .HasColumnName("z2spallowence");

                    b.Property<double?>("Z3b")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z3b");

                    b.Property<double?>("Z3d")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z3d");

                    b.Property<double?>("Z3da")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z3da");

                    b.Property<double?>("Z3hra")
                        .HasColumnType("float")
                        .HasColumnName("z3hra");

                    b.Property<double?>("Z3m")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z3m");

                    b.Property<double?>("Z3other")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z3other");

                    b.Property<double?>("Z3spallowence")
                        .HasColumnType("float")
                        .HasColumnName("z3spallowence");

                    b.Property<double?>("Z4b")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z4b");

                    b.Property<double?>("Z4d")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z4d");

                    b.Property<double?>("Z4da")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z4da");

                    b.Property<double?>("Z4hra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z4hra");

                    b.Property<double?>("Z4m")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z4m");

                    b.Property<double?>("Z4other")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z4other");

                    b.Property<double?>("Z4spallowence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("z4spallowence");

                    b.HasKey("Stid", "Catid", "Stdate");

                    b.ToTable("MWDATA", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Mwnote", b =>
                {
                    b.Property<string>("Stid")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("STID")
                        .IsFixedLength();

                    b.Property<string>("Catgrp")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("CATGRP")
                        .IsFixedLength();

                    b.Property<string>("Stcats")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("STCATS");

                    b.Property<string>("Stnotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("STNOTES");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TITLE");

                    b.Property<string>("Tp1")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TP1")
                        .IsFixedLength();

                    b.Property<string>("Tp2")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("TP2")
                        .IsFixedLength();

                    b.Property<string>("Z1n")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Z1N");

                    b.Property<string>("Z2n")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Z2N");

                    b.Property<string>("Z3n")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Z3N");

                    b.Property<string>("Z4n")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Z4N");

                    b.HasKey("Stid", "Catgrp");

                    b.ToTable("MWNOTES", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncactaken", b =>
                {
                    b.Property<DateOnly?>("Accrdate")
                        .HasColumnType("date")
                        .HasColumnName("ACCRDATE");

                    b.Property<DateOnly?>("Acdate")
                        .HasColumnType("date")
                        .HasColumnName("ACDATE");

                    b.Property<int>("Acid")
                        .HasColumnType("int")
                        .HasColumnName("ACID");

                    b.Property<string>("Actaken")
                        .HasColumnType("text")
                        .HasColumnName("ACTAKEN");

                    b.Property<int>("Actid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ACTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Actid"));

                    b.Property<DateOnly?>("Nacdate")
                        .HasColumnType("date")
                        .HasColumnName("NACDATE");

                    b.Property<int?>("Showclient")
                        .HasColumnType("int")
                        .HasColumnName("SHOWCLIENT");

                    b.Property<int?>("Uno")
                        .HasColumnType("int")
                        .HasColumnName("UNO");

                    b.ToTable("NCACTAKEN", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncaction", b =>
                {
                    b.Property<DateOnly?>("Accldate")
                        .HasColumnType("date")
                        .HasColumnName("ACCLDATE");

                    b.Property<string>("Acdetail")
                        .HasColumnType("text")
                        .HasColumnName("ACDETAIL");

                    b.Property<int>("Acid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ACID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Acid"));

                    b.Property<DateOnly?>("Acidate")
                        .HasColumnType("date")
                        .HasColumnName("ACIDATE");

                    b.Property<string>("Acistatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ACISTATUS")
                        .IsFixedLength();

                    b.Property<int?>("Aclink")
                        .HasColumnType("int")
                        .HasColumnName("ACLINK");

                    b.Property<DateOnly?>("Acrdate")
                        .HasColumnType("date")
                        .HasColumnName("ACRDATE");

                    b.Property<string>("Acremarks")
                        .HasColumnType("text")
                        .HasColumnName("ACREMARKS");

                    b.Property<int?>("Acruser")
                        .HasColumnType("int")
                        .HasColumnName("ACRUSER");

                    b.Property<int?>("Acshow")
                        .HasColumnType("int")
                        .HasColumnName("ACSHOW");

                    b.Property<string>("Acstatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ACSTATUS")
                        .IsFixedLength();

                    b.Property<string>("Actitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ACTITLE");

                    b.Property<string>("Actp")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("ACTP")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Adocdate")
                        .HasColumnType("date")
                        .HasColumnName("ADOCDATE");

                    b.Property<DateOnly?>("Atargdate")
                        .HasColumnType("date")
                        .HasColumnName("ATARGDATE");

                    b.Property<string>("Lcode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("LCODE");

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<string>("Sbtp")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("SBTP")
                        .IsFixedLength();

                    b.Property<string>("Tpp")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("tpp");

                    b.ToTable("NCACTION", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncaudet", b =>
                {
                    b.Property<int?>("Achk")
                        .HasColumnType("int")
                        .HasColumnName("ACHK");

                    b.Property<int>("Aid")
                        .HasColumnType("int")
                        .HasColumnName("AID");

                    b.Property<string>("Armk")
                        .HasColumnType("text")
                        .HasColumnName("ARMK");

                    b.Property<int>("Ciid")
                        .HasColumnType("int")
                        .HasColumnName("CIID");

                    b.ToTable("NCAUDET", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncaudmast", b =>
                {
                    b.Property<string>("Aby")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ABY");

                    b.Property<DateOnly?>("Acldate")
                        .HasColumnType("date")
                        .HasColumnName("ACLDATE");

                    b.Property<int?>("Aclosed")
                        .HasColumnType("int")
                        .HasColumnName("ACLOSED");

                    b.Property<double?>("Acomplete")
                        .HasColumnType("float")
                        .HasColumnName("ACOMPLETE");

                    b.Property<DateOnly?>("Adate")
                        .HasColumnType("date")
                        .HasColumnName("ADATE");

                    b.Property<string>("Adremarks")
                        .HasColumnType("text")
                        .HasColumnName("ADREMARKS");

                    b.Property<int>("Aid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Aid"));

                    b.Property<string>("Aperiod")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("APERIOD");

                    b.Property<DateOnly?>("Arepdate")
                        .HasColumnType("date")
                        .HasColumnName("AREPDATE");

                    b.Property<DateOnly?>("Aschdate")
                        .HasColumnType("date")
                        .HasColumnName("ASCHDATE");

                    b.Property<double?>("Ascore")
                        .HasColumnType("float")
                        .HasColumnName("ASCORE");

                    b.Property<int?>("Atime")
                        .HasColumnType("int")
                        .HasColumnName("ATIME");

                    b.Property<string>("Audrep")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AUDREP");

                    b.Property<int?>("Auser")
                        .HasColumnType("int")
                        .HasColumnName("AUSER");

                    b.Property<int?>("Ayear")
                        .HasColumnType("int")
                        .HasColumnName("AYEAR");

                    b.Property<string>("Lcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LCODE");

                    b.Property<string>("Noofemps")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("NOOFEMPS")
                        .IsFixedLength();

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.ToTable("NCAUDMAST", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncaumap", b =>
                {
                    b.Property<int>("Acid")
                        .HasColumnType("int")
                        .HasColumnName("ACID");

                    b.Property<int>("Uauth")
                        .HasColumnType("int")
                        .HasColumnName("UAUTH");

                    b.Property<int>("Uno")
                        .HasColumnType("int")
                        .HasColumnName("UNO");

                    b.ToTable("NCAUMAP", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Nccontr", b =>
                {
                    b.Property<string>("Amount")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateOnly?>("Chqdate")
                        .HasColumnType("date")
                        .HasColumnName("CHQDATE");

                    b.Property<string>("Chqno")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CHQNO");

                    b.Property<int>("Contid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CONTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Contid"));

                    b.Property<int>("Cyear")
                        .HasColumnType("int")
                        .HasColumnName("CYEAR");

                    b.Property<DateOnly?>("Depdate")
                        .HasColumnType("date")
                        .HasColumnName("DEPDATE");

                    b.Property<string>("Filename")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FILENAME");

                    b.Property<int?>("Fileup")
                        .HasColumnType("int")
                        .HasColumnName("FILEUP");

                    b.Property<string>("Freq")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FREQ")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Lastdate")
                        .HasColumnType("date")
                        .HasColumnName("LASTDATE");

                    b.Property<string>("Lcode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("LCODE");

                    b.Property<int?>("Ld")
                        .HasColumnType("int")
                        .HasColumnName("LD");

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<int>("Period")
                        .HasColumnType("int")
                        .HasColumnName("PERIOD");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("REMARKS");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<string>("Tp")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("TP")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Uploaddate")
                        .HasColumnType("date")
                        .HasColumnName("UPLOADDATE");

                    b.ToTable("NCCONTR", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncfile", b =>
                {
                    b.Property<int?>("Farc")
                        .HasColumnType("int")
                        .HasColumnName("FARC");

                    b.Property<int>("Fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Fid"));

                    b.Property<int?>("Flink")
                        .HasColumnType("int")
                        .HasColumnName("FLINK");

                    b.Property<string>("Fname")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FNAME");

                    b.Property<string>("Ftitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FTITLE");

                    b.Property<string>("Ftp")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("FTP")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Fupdate")
                        .HasColumnType("date")
                        .HasColumnName("FUPDATE");

                    b.Property<string>("Lfile")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("LFILE")
                        .IsFixedLength();

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.ToTable("NCFILES", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncfin", b =>
                {
                    b.Property<DateOnly?>("Depdate")
                        .HasColumnType("date")
                        .HasColumnName("DEPDATE");

                    b.Property<string>("ExcUsr")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("exc_usr");

                    b.Property<string>("Filename")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FILENAME");

                    b.Property<int?>("Fileup")
                        .HasColumnType("int")
                        .HasColumnName("FILEUP");

                    b.Property<DateOnly?>("Lastdate")
                        .HasColumnType("date")
                        .HasColumnName("LASTDATE");

                    b.Property<string>("Lcode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("LCODE");

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<string>("PenaltyDelay")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("penalty_delay");

                    b.Property<int>("Rcode")
                        .HasColumnType("int")
                        .HasColumnName("RCODE");

                    b.Property<string>("ReasonDelay")
                        .HasColumnType("text")
                        .HasColumnName("reason_delay");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("REMARKS");

                    b.Property<int>("Rtid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Rtid"));

                    b.Property<int>("Ryear")
                        .HasColumnType("int")
                        .HasColumnName("RYEAR");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<string>("TagUsr")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("tag_usr");

                    b.Property<DateOnly?>("Uploaddate")
                        .HasColumnType("date")
                        .HasColumnName("UPLOADDATE");

                    b.ToTable("NCFIN", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Nclocmap", b =>
                {
                    b.Property<string>("Acode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("acode")
                        .IsFixedLength();

                    b.Property<string>("Lcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("lcode");

                    b.Property<int>("Oblig")
                        .HasColumnType("int")
                        .HasColumnName("oblig");

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("oid");

                    b.ToTable("NCLOCMAP", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncmloc", b =>
                {
                    b.Property<string>("Lcode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("lcode");

                    b.Property<string>("Cemail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("cemail");

                    b.Property<DateOnly?>("Doi")
                        .HasColumnType("date")
                        .HasColumnName("doi");

                    b.Property<DateOnly?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<string>("FinEsclatnCnt")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Fin_esclatn_cnt");

                    b.Property<string>("FinEsclatnMail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Fin_esclatn_mail");

                    b.Property<string>("FinRespEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Fin_resp_email");

                    b.Property<string>("FinRespPrsn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Fin_resp_prsn");

                    b.Property<string>("Iemail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("iemail");

                    b.Property<int?>("Iscentral")
                        .HasColumnType("int")
                        .HasColumnName("iscentral");

                    b.Property<int?>("Iscloc")
                        .HasColumnType("int")
                        .HasColumnName("iscloc");

                    b.Property<int?>("Lactive")
                        .HasColumnType("int")
                        .HasColumnName("lactive");

                    b.Property<string>("Laddress")
                        .HasColumnType("text")
                        .HasColumnName("laddress");

                    b.Property<string>("Lcity")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("lcity");

                    b.Property<string>("Lconemail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lconemail");

                    b.Property<string>("Lconno")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lconno");

                    b.Property<string>("Lcontact")
                        .HasColumnType("text")
                        .HasColumnName("lcontact");

                    b.Property<string>("Lgroup2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lgroup2");

                    b.Property<string>("Lgroup3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lgroup3");

                    b.Property<string>("Lname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lname");

                    b.Property<string>("Lregion")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("lregion");

                    b.Property<int?>("Lsetup")
                        .HasColumnType("int")
                        .HasColumnName("lsetup");

                    b.Property<string>("Lstate")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("lstate")
                        .IsFixedLength();

                    b.Property<string>("Ltype")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("ltype")
                        .IsFixedLength();

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("oid");

                    b.Property<DateOnly?>("Stdate")
                        .HasColumnType("date")
                        .HasColumnName("stdate");

                    b.HasKey("Lcode")
                        .HasName("ncmloc_key");

                    b.ToTable("NCMLOC", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncmlocbo", b =>
                {
                    b.Property<string>("ProjectCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GeneralContractor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Lcode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("lcode");

                    b.Property<string>("NatureofWork")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OvalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("OvalID");

                    b.Property<string>("ProjectAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("ProjectArea")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<double?>("ProjectCostEst")
                        .HasColumnType("float")
                        .HasColumnName("ProjectCost_est");

                    b.Property<DateOnly?>("ProjectEndDateEst")
                        .HasColumnType("date")
                        .HasColumnName("ProjectEndDate_est");

                    b.Property<string>("ProjectLead")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("ProjectStartDateEst")
                        .HasColumnType("date")
                        .HasColumnName("ProjectStartDate_est");

                    b.Property<int>("VendorCount")
                        .HasColumnType("int");

                    b.Property<int>("WorkerHeadCount")
                        .HasColumnType("int");

                    b.HasKey("ProjectCode");

                    b.HasIndex("Lcode");

                    b.ToTable("NCMLOCBO", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncmorg", b =>
                {
                    b.Property<string>("Oid")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("oid");

                    b.Property<bool>("Client")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Contemail")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Contname")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Echeck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("Edoc")
                        .HasColumnType("bit");

                    b.Property<bool>("Leed")
                        .HasColumnType("bit");

                    b.Property<int?>("Oactive")
                        .HasColumnType("int")
                        .HasColumnName("oactive");

                    b.Property<string>("Oname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("oname");

                    b.Property<int?>("Otype")
                        .HasColumnType("int")
                        .HasColumnName("otype");

                    b.Property<string>("Spoc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<string>("SpocEml")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Spoc_eml");

                    b.Property<int?>("Styear")
                        .HasColumnType("int")
                        .HasColumnName("styear");

                    b.Property<bool>("Vcheck")
                        .HasColumnType("bit");

                    b.HasKey("Oid");

                    b.ToTable("NCMORG", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncreg", b =>
                {
                    b.Property<DateOnly?>("Doe")
                        .HasColumnType("date")
                        .HasColumnName("DOE");

                    b.Property<DateOnly?>("Doi")
                        .HasColumnType("date")
                        .HasColumnName("DOI");

                    b.Property<DateOnly?>("Dolr")
                        .HasColumnType("date")
                        .HasColumnName("DOLR");

                    b.Property<string>("Filename")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FILENAME");

                    b.Property<string>("Lcode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("LCODE");

                    b.Property<string>("Nmoe")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NMOE");

                    b.Property<int?>("Noe")
                        .HasColumnType("int")
                        .HasColumnName("NOE");

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("REMARKS");

                    b.Property<string>("Renhist")
                        .HasColumnType("text")
                        .HasColumnName("RENHIST");

                    b.Property<string>("Rno")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RNO");

                    b.Property<string>("Status")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("STATUS")
                        .IsFixedLength();

                    b.Property<string>("Tp")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("TP")
                        .IsFixedLength();

                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.ToTable("NCREG", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncret", b =>
                {
                    b.Property<DateOnly?>("Depdate")
                        .HasColumnType("date")
                        .HasColumnName("DEPDATE");

                    b.Property<string>("Filename")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FILENAME");

                    b.Property<int?>("Fileup")
                        .HasColumnType("int")
                        .HasColumnName("FILEUP");

                    b.Property<DateOnly?>("Lastdate")
                        .HasColumnType("date")
                        .HasColumnName("LASTDATE");

                    b.Property<string>("Lcode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("LCODE");

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<int>("Rcode")
                        .HasColumnType("int")
                        .HasColumnName("RCODE");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("REMARKS");

                    b.Property<int>("Rtid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Rtid"));

                    b.Property<int>("Ryear")
                        .HasColumnType("int")
                        .HasColumnName("RYEAR");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<DateOnly?>("Uploaddate")
                        .HasColumnType("date")
                        .HasColumnName("UPLOADDATE");

                    b.ToTable("NCRET", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Nctempcnt", b =>
                {
                    b.Property<int?>("Active")
                        .HasColumnType("int");

                    b.Property<int>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cid"));

                    b.Property<string>("Cstate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("CSTATE")
                        .IsFixedLength();

                    b.Property<string>("Freq")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FREQ")
                        .IsFixedLength();

                    b.Property<int>("Ld")
                        .HasColumnType("int")
                        .HasColumnName("LD");

                    b.Property<int?>("Moffset")
                        .HasColumnType("int")
                        .HasColumnName("MOFFSET");

                    b.Property<int>("Period")
                        .HasColumnType("int")
                        .HasColumnName("PERIOD");

                    b.Property<string>("Tp")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("TP")
                        .IsFixedLength();

                    b.ToTable("NCTEMPCNT", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Nctempfin", b =>
                {
                    b.Property<string>("Frequency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("frequency");

                    b.Property<string>("Ract")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .HasColumnName("RACT")
                        .IsFixedLength();

                    b.Property<int>("Rcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RCODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Rcode"));

                    b.Property<int?>("Rd")
                        .HasColumnType("int")
                        .HasColumnName("RD");

                    b.Property<string>("Rdesc")
                        .HasColumnType("text")
                        .HasColumnName("RDESC");

                    b.Property<string>("Rform")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("RFORM")
                        .IsFixedLength();

                    b.Property<int?>("Rm")
                        .HasColumnType("int")
                        .HasColumnName("RM");

                    b.Property<int?>("Roblig")
                        .HasColumnType("int")
                        .HasColumnName("ROBLIG");

                    b.Property<string>("Rstate")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("RSTATE")
                        .IsFixedLength();

                    b.Property<string>("Rtitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("RTITLE")
                        .IsFixedLength();

                    b.Property<string>("Rtype")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("RTYPE")
                        .IsFixedLength();

                    b.Property<int?>("Triggr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-5)
                        .HasColumnName("triggr");

                    b.Property<int?>("Yroff")
                        .HasColumnType("int")
                        .HasColumnName("YROFF");

                    b.ToTable("NCTEMPFIN", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Nctempret", b =>
                {
                    b.Property<string>("Ract")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .HasColumnName("RACT")
                        .IsFixedLength();

                    b.Property<int?>("Ractive")
                        .HasColumnType("int")
                        .HasColumnName("RACTIVE");

                    b.Property<int>("Rcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RCODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Rcode"));

                    b.Property<int?>("Rd")
                        .HasColumnType("int")
                        .HasColumnName("RD");

                    b.Property<string>("Rdesc")
                        .HasColumnType("text")
                        .HasColumnName("RDESC");

                    b.Property<string>("Rform")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("RFORM")
                        .IsFixedLength();

                    b.Property<int?>("Rm")
                        .HasColumnType("int")
                        .HasColumnName("RM");

                    b.Property<int?>("Roblig")
                        .HasColumnType("int")
                        .HasColumnName("ROBLIG");

                    b.Property<string>("Rstate")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("RSTATE")
                        .IsFixedLength();

                    b.Property<string>("Rtitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("RTITLE")
                        .IsFixedLength();

                    b.Property<string>("Rtype")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("RTYPE")
                        .IsFixedLength();

                    b.Property<int?>("Yroff")
                        .HasColumnType("int")
                        .HasColumnName("YROFF");

                    b.ToTable("NCTEMPRET", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncumap", b =>
                {
                    b.Property<string>("Lcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("lcode");

                    b.Property<string>("Oid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("oid");

                    b.Property<string>("Ulevel")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("ulevel")
                        .IsFixedLength();

                    b.Property<int>("Uno")
                        .HasColumnType("int")
                        .HasColumnName("uno");

                    b.ToTable("NCUMAP", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncuser", b =>
                {
                    b.Property<string>("Userid")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("char(200)")
                        .HasColumnName("USERID")
                        .IsFixedLength();

                    b.Property<string>("Emailid")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("EMAILID")
                        .IsFixedLength();

                    b.Property<string>("Oid")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("OID")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("PASSWORD")
                        .IsFixedLength();

                    b.Property<string>("Stcode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("STCODE")
                        .IsFixedLength();

                    b.Property<int?>("Uactive")
                        .HasColumnType("int")
                        .HasColumnName("UACTIVE");

                    b.Property<string>("Uname")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("char(40)")
                        .HasColumnName("UNAME")
                        .IsFixedLength();

                    b.Property<int>("Uno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UNO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uno"));

                    b.Property<int?>("Userlevel")
                        .HasColumnType("int")
                        .HasColumnName("USERLEVEL");

                    b.HasKey("Userid");

                    b.ToTable("NCUSER", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Noti", b =>
                {
                    b.Property<string>("Acode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("ACODE")
                        .IsFixedLength();

                    b.Property<string>("Applictn")
                        .HasColumnType("text")
                        .HasColumnName("applictn");

                    b.Property<DateOnly?>("Crdate")
                        .HasColumnType("date")
                        .HasColumnName("CRDATE");

                    b.Property<string>("Dcode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("DCODE")
                        .IsFixedLength();

                    b.Property<DateTime?>("Ddate")
                        .HasColumnType("datetime")
                        .HasColumnName("DDATE");

                    b.Property<string>("Ddesc")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DDESC");

                    b.Property<string>("Detail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DETAIL");

                    b.Property<string>("Dtitle")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("DTITLE")
                        .IsFixedLength();

                    b.Property<string>("Exempt")
                        .HasColumnType("text")
                        .HasColumnName("exempt");

                    b.Property<string>("Filename")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FILENAME");

                    b.Property<string>("Folder")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FOLDER");

                    b.Property<int?>("Nactive")
                        .HasColumnType("int")
                        .HasColumnName("NACTIVE");

                    b.Property<string>("Section")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SECTION");

                    b.Property<string>("State")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .HasColumnName("state")
                        .IsFixedLength();

                    b.Property<DateTime?>("Wefdate")
                        .HasColumnType("datetime")
                        .HasColumnName("wefdate");

                    b.ToTable("NOTI", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Obligati", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("CODE");

                    b.Property<string>("Act")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("ACT")
                        .IsFixedLength();

                    b.Property<string>("Action")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("ACTION");

                    b.Property<string>("Audits")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("AUDITS");

                    b.Property<string>("Dsource")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("DSOURCE");

                    b.Property<int?>("Oactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("OACTIVE");

                    b.Property<string>("Oblige")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("char(250)")
                        .HasColumnName("OBLIGE")
                        .IsFixedLength();

                    b.Property<int?>("Oblindex")
                        .HasColumnType("int")
                        .HasColumnName("OBLINDEX");

                    b.Property<int?>("Parentcode")
                        .HasColumnType("int")
                        .HasColumnName("PARENTCODE");

                    b.Property<int?>("Riskrat")
                        .HasColumnType("int")
                        .HasColumnName("RISKRAT");

                    b.Property<string>("Section")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("SECTION")
                        .IsFixedLength();

                    b.Property<string>("Support")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("SUPPORT");

                    b.Property<string>("Timing")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("TIMING")
                        .IsFixedLength();

                    b.Property<string>("Title")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("char(60)")
                        .HasColumnName("TITLE")
                        .IsFixedLength();

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("TYPE")
                        .IsFixedLength();

                    b.HasKey("Code");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Code"), false);

                    b.HasIndex(new[] { "Code", "Act" }, "CODEACT");

                    b.HasIndex(new[] { "Code", "Act", "Title", "Oblindex" }, "obl");

                    b.HasIndex(new[] { "Act", "Code" }, "obligati0");

                    b.HasIndex(new[] { "Code" }, "obligati000");

                    b.ToTable("OBLIGATI", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Reg", b =>
                {
                    b.Property<string>("Stid")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("stid")
                        .IsFixedLength();

                    b.Property<string>("Tp")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("tp")
                        .IsFixedLength();

                    b.Property<int>("Rindex")
                        .HasColumnType("int")
                        .HasColumnName("rindex");

                    b.Property<int?>("Ractive")
                        .HasColumnType("int")
                        .HasColumnName("ractive");

                    b.Property<string>("Rfn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("rfn")
                        .IsFixedLength();

                    b.Property<string>("Ritem")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ritem");

                    b.Property<string>("Rtitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("rtitle")
                        .IsFixedLength();

                    b.HasKey("Stid", "Tp", "Rindex");

                    b.ToTable("REGS", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.RegistrationViewModel", b =>
                {
                    b.Property<DateTime?>("Doe")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("Dolr")
                        .HasColumnType("date");

                    b.Property<string>("LCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.ReturnsViewModel", b =>
                {
                    b.Property<DateOnly?>("Depdate")
                        .HasColumnType("date");

                    b.Property<string>("LCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RM")
                        .HasColumnType("int");

                    b.Property<string>("RTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("YROFF")
                        .HasColumnType("int");

                    b.Property<string>("oid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Rrdet", b =>
                {
                    b.Property<string>("F1")
                        .HasColumnType("text")
                        .HasColumnName("f1");

                    b.Property<string>("F10")
                        .HasColumnType("text")
                        .HasColumnName("f10");

                    b.Property<string>("F2")
                        .HasColumnType("text")
                        .HasColumnName("f2");

                    b.Property<string>("F3")
                        .HasColumnType("text")
                        .HasColumnName("f3");

                    b.Property<string>("F4")
                        .HasColumnType("text")
                        .HasColumnName("f4");

                    b.Property<string>("F5")
                        .HasColumnType("text")
                        .HasColumnName("f5");

                    b.Property<string>("F6")
                        .HasColumnType("text")
                        .HasColumnName("f6");

                    b.Property<string>("F7")
                        .HasColumnType("text")
                        .HasColumnName("f7");

                    b.Property<string>("F8")
                        .HasColumnType("text")
                        .HasColumnName("f8");

                    b.Property<string>("F9")
                        .HasColumnType("text")
                        .HasColumnName("f9");

                    b.Property<int>("Rrid")
                        .HasColumnType("int")
                        .HasColumnName("rrid");

                    b.Property<string>("Stid")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("stid")
                        .IsFixedLength();

                    b.ToTable("RRDET", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Rrlist", b =>
                {
                    b.Property<int>("Rrid")
                        .HasColumnType("int")
                        .HasColumnName("rrid");

                    b.Property<int?>("Rractive")
                        .HasColumnType("int")
                        .HasColumnName("rractive");

                    b.Property<string>("Rrname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("rrname")
                        .IsFixedLength();

                    b.Property<int?>("Rrorder")
                        .HasColumnType("int")
                        .HasColumnName("rrorder");

                    b.Property<string>("Rrremarks")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("rrremarks");

                    b.Property<string>("Rrtitle")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("char(25)")
                        .HasColumnName("rrtitle")
                        .IsFixedLength();

                    b.Property<int?>("Rrtp")
                        .HasColumnType("int")
                        .HasColumnName("rrtp");

                    b.HasKey("Rrid");

                    b.ToTable("RRLIST", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Rrstruc", b =>
                {
                    b.Property<int>("Rrid")
                        .HasColumnType("int")
                        .HasColumnName("RRID");

                    b.Property<string>("F10f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F10F")
                        .IsFixedLength();

                    b.Property<string>("F10t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F10T");

                    b.Property<string>("F1f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F1F")
                        .IsFixedLength();

                    b.Property<string>("F1t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F1T");

                    b.Property<string>("F2f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F2F")
                        .IsFixedLength();

                    b.Property<string>("F2t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F2T");

                    b.Property<string>("F3f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F3F")
                        .IsFixedLength();

                    b.Property<string>("F3t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F3T");

                    b.Property<string>("F4f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F4F")
                        .IsFixedLength();

                    b.Property<string>("F4t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F4T");

                    b.Property<string>("F5f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F5F")
                        .IsFixedLength();

                    b.Property<string>("F5t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F5T");

                    b.Property<string>("F6f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F6F")
                        .IsFixedLength();

                    b.Property<string>("F6t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F6T");

                    b.Property<string>("F7f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F7F")
                        .IsFixedLength();

                    b.Property<string>("F7t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F7T");

                    b.Property<string>("F8f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F8F")
                        .IsFixedLength();

                    b.Property<string>("F8t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F8T");

                    b.Property<string>("F9f")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("F9F")
                        .IsFixedLength();

                    b.Property<string>("F9t")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("F9T");

                    b.HasKey("Rrid");

                    b.ToTable("RRSTRUC", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.ServcMap", b =>
                {
                    b.Property<int?>("Echkuno")
                        .HasColumnType("int")
                        .HasColumnName("echkuno");

                    b.Property<string>("Ecoid")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ecoid");

                    b.Property<int?>("Edoc")
                        .HasColumnType("int")
                        .HasColumnName("edoc");

                    b.Property<int?>("Edoid")
                        .HasColumnType("int")
                        .HasColumnName("edoid");

                    b.Property<int>("Uno")
                        .HasColumnType("int")
                        .HasColumnName("uno");

                    b.Property<int?>("Vchkuno")
                        .HasColumnType("int")
                        .HasColumnName("vchkuno");

                    b.Property<int?>("Vcoid")
                        .HasColumnType("int")
                        .HasColumnName("vcoid");

                    b.Property<int?>("Vproid")
                        .HasColumnType("int")
                        .HasColumnName("vproid");

                    b.Property<int?>("Vuno")
                        .HasColumnType("int")
                        .HasColumnName("vuno");

                    b.ToTable("Servc_map", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Trig", b =>
                {
                    b.Property<decimal>("Tcode")
                        .HasColumnType("decimal(4, 0)")
                        .HasColumnName("TCODE");

                    b.Property<string>("Tdesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("TDESC")
                        .IsFixedLength();

                    b.Property<string>("Ttype")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TTYPE")
                        .IsFixedLength();

                    b.HasKey("Tcode");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Tcode"), false);

                    b.ToTable("TRIGS", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Triglink", b =>
                {
                    b.Property<decimal>("Tcode")
                        .HasColumnType("decimal(4, 0)")
                        .HasColumnName("TCODE");

                    b.Property<decimal>("Ocode")
                        .HasColumnType("decimal(5, 0)")
                        .HasColumnName("OCODE");

                    b.HasKey("Tcode", "Ocode");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Tcode", "Ocode"), false);

                    b.ToTable("TRIGLINK", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.UserActivation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.ToTable("UserActivation", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Webinar", b =>
                {
                    b.Property<int?>("Active")
                        .HasColumnType("int")
                        .HasColumnName("active");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("email");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.ToTable("Webinar", (string)null);
                });

            modelBuilder.Entity("Echeckdem.Models.Ncmlocbo", b =>
                {
                    b.HasOne("Echeckdem.Models.Ncmloc", "LcodeNavigation")
                        .WithMany("Ncmlocbos")
                        .HasForeignKey("Lcode")
                        .HasConstraintName("FK_NCMLOCBO_NCMLOC");

                    b.Navigation("LcodeNavigation");
                });

            modelBuilder.Entity("Echeckdem.Models.Ncmloc", b =>
                {
                    b.Navigation("Ncmlocbos");
                });
#pragma warning restore 612, 618
        }
    }
}
