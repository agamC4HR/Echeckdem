@model IEnumerable<Echeckdem.CustomFolder.UserManagement.UserManagementViewModel>

@{
    ViewData["Title"] = "User List";
    ViewData["Heading"] = "User List";
    ViewData["Heading_child"] = "...";
}

@section TableHeadingContent {
    <!-- Search bar -->
        <input type="text" id="searchBar" placeholder="Search User..." class="table-search-input" onkeyup="searchTable()">

    <!-- Add button -->
    <button type="button" class="table-add-btn" onclick="location.href='@Url.Action("Create")'" style="top:0; height:30px;">
        Add New User
    </button>
}

<div class="table-container-detailsView">
    <table class="styled-table">
            <thead style="top:75px;">      
                <tr>
            <th>UserID</th>
            <th>Full Name</th>
            <th>Email</th>
            <th>Organisation</th>
            <th style="width:100px;">User Level</th>
            <th>Active</th>
            <th>Edit</th>
            <th>Authorisation</th>
            <th style="width:75px;">Map Org</th>
            
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model)
        {
            <tr>
                <td>@user.UserID</td>
                <td>@user.UNAME</td>
                <td>@user.EmailID</td>
                <td>@user.OrganisationName</td>
                <td>@user.UserLevel</td>
                <td>@user.Uactive</td>
                <td style="text-align:center">
                    <a href="@Url.Action("Edit", "UserManagement", new { id = user.UserID })">
                            <i class="fas fa-pen edit-icon" style="color: #dd3432; font-size: 14px; cursor: pointer;"></i>
                    </a>
                </td>
                    <td style="text-align:center">
                   
                    <form method="post" action="@Url.Action("MapOrganisation", "UserManagement")">
                        <input type="hidden" name="userId" value="@user.UserID" />
                            <button type="submit" style="border:none; background:none;">
                                <i class="fas fa-pen edit-icon" style="color: #dd3432; font-size: 14px; cursor: pointer;"></i>
                        </button>
                    </form>

                </td>
                    <td style="text-align:center">
                    <form method="post" asp-action="InitiateAddMapping" asp-controller="UserManagement">
                        <input type="hidden" name="userId" value="@user.UserID" />
                            <button type="submit" style="border:none; background:none;"><i class="fas fa-pen edit-icon" style="color: #dd3432; font-size: 14px; cursor: pointer;"></i></button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>
</div>

<script>
    function searchTable() {
        const input = document.getElementById("searchBar");
        const filter = input.value.toLowerCase();
        const table = document.querySelector(".styled-table tbody");
        const rows = table.getElementsByTagName("tr");

        for (let i = 0; i < rows.length; i++) {
            const userIdCell = rows[i].cells[0]; // UserID column
            const nameCell = rows[i].cells[1];   // Full Name column

            // Remove previous highlights
            removeHighlight(userIdCell);
            removeHighlight(nameCell);

            const userIdText = userIdCell.textContent || userIdCell.innerText;
            const nameText = nameCell.textContent || nameCell.innerText;

            const matchUserId = userIdText.toLowerCase().includes(filter);
            const matchName = nameText.toLowerCase().includes(filter);

            if (filter === "" || matchUserId || matchName) {
                rows[i].style.display = "";

                // Highlight match
                if (matchUserId) highlightText(userIdCell, filter);
                if (matchName) highlightText(nameCell, filter);
            } else {
                rows[i].style.display = "none";
            }
        }
    }

    function highlightText(cell, term) {
        if (!term) return;
        const innerHTML = cell.innerHTML;
        const regex = new RegExp(`(${term})`, 'ig');

        // Only highlight text nodes, not HTML inside (like <a>)
        const tempDiv = document.createElement("div");
        tempDiv.innerHTML = innerHTML;

        const walker = document.createTreeWalker(tempDiv, NodeFilter.SHOW_TEXT, null, false);
        const nodes = [];

        while (walker.nextNode()) {
            nodes.push(walker.currentNode);
        }

        for (let node of nodes) {
            if (node.parentNode && node.textContent.toLowerCase().includes(term)) {
                const span = document.createElement("span");
                span.innerHTML = node.textContent.replace(regex, `<mark>$1</mark>`);
                node.replaceWith(...span.childNodes);
            }
        }

        cell.innerHTML = tempDiv.innerHTML;
    }

    function removeHighlight(cell) {
        const marked = cell.querySelectorAll('mark');
        for (let mark of marked) {
            const parent = mark.parentNode;
            parent.replaceChild(document.createTextNode(mark.textContent), mark);
            parent.normalize();
        }
    }
</script>

