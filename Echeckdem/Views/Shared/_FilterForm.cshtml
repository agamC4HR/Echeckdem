<style>

    .table-filter-container-parent {
        position: fixed;
        inset: 0;
        z-index: 50;
        display: none;
        align-items: center;
        justify-content: center;
        background-color: rgb(0 0 0 / 0.5);
        backdrop-filter: blur(4px);
        overflow: hidden;
    }

        .table-filter-container-parent.show {
            display: flex;
        }

    .table-filter-container {
        display: none;
        margin-top: 75px;
        padding: 15px;
        border-radius: .375rem;
        transition: all 0.3s ease;
        overflow-y: auto;
        position: fixed;
        width: 80vw;
        z-index: 30;
        left: 134px;
        background: #ffffff;
    }

        .table-filter-container.show {
            display: flex;
            flex-direction: column;
        }

    .close-btn-table-filter-container {
        background: transparent;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .table-filter-container-header {
        display: flex;
        flex-direction: row-reverse;
        justify-content: space-between;
        padding: 5px;
        align-items: center;
    }

    .form-row-2col {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 1rem;
    }

        .form-group label {
            font-weight: bold;
            margin-bottom: 0.5rem;
            color: #333;
            font-size: 12px;
        }

    .form-control {
        font-size: 12px;
        border: 1px solid #ccc;
        border-radius: .375rem;
        outline: none;
        transition: border-color 0.2s ease-in-out;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.2);
        }



    /* Date picker alignment */
    input[type="date"] {
        padding: 8px 10px;
    }
</style>

<!-- Filter Form -->
<div class="table-filter-container-parent" id="table-filter-container-parent">
    <div class="table-filter-container" id="table-filter-container">
        <div class="table-filter-container-header">
            <button type="button" class="close-btn-table-filter-container" onclick="toggleFilterForm()">✕</button>
            <h3 class="heading">Filter Options</h3>
        </div>
        <form method="get" asp-action="CombinedDetailed" style="padding:0 15px 15px 7px;">
            <div class="form-row-2col">
                <div class="form-group">
                    <label for="organizationFilter">Filter by Organization:</label>
                    <select id="organizationFilter" name="organizationName" class="form-control">
                        <option value="">All</option>
                        @if (ViewBag.OrganizationNames != null)
                        {
                            foreach (var org in ViewBag.OrganizationNames)
                            {
                                <option value="@org">@org</option>
                            }
                        }
                    </select>

                </div>
                <div class="form-group">
                    <label for="locationFilter">Site</label>
                    @* <input type="text" name="site" class="form-control" value="@Model.Site" /> *@
                    <select id="locationFilter" name="LocationName" class="form-control">
                        <option value="">Select a Site</option>
                        @if (ViewBag.LocationNames != null)
                        {
                            foreach (var loc in ViewBag.LocationNames)
                            {
                                <option value="@loc">@loc</option>
                            }
                        }
                    </select>
                </div>
                </div>
            <div class="form-row-2col">
                <div class="form-group">
                    <label for="StateFilter">State</label>
                    <select id="StateFilter" name="Statename" class="form-control">
                        <option value="">Select a State</option>
                        @if (ViewBag.StateNames != null)
                        {
                            foreach (var sta in ViewBag.StateNames)
                            {
                                <option value="@sta">@sta</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="CityFilter">City</label>
                    <select id="CityFilter" name="CityName" class="form-control">
                        <option value="">Select a City</option>
                        @if (ViewBag.CityNames != null)
                        {
                            foreach (var city in ViewBag.CityNames)
                            {
                                <option value="@city">@city</option>
                            }
                        }
                    </select>
                </div>
                </div>


            <div class="form-row-2col">
                <div class="form-group">
                    <label for="StartDueDate">Start Due Date</label>
                    <input type="date" name="startDueDate" class="form-control" id="startDueDate" value="@Model.StartDueDate?.ToString("yyyy-MM-dd")" />
                </div>
                <div class="form-group">
                    <label for="EndDueDate">End Due Date</label>
                    <input type="date" name="endDueDate" class="form-control" id="endDueDate" value="@Model.EndDueDate?.ToString("yyyy-MM-dd")" />
                </div>
                </div>
            <div class="form-row-2col">
                <div class="form-group">
                    <label for="StartPeriod">Start Period</label>
                    <input type="date" name="startPeriod" class="form-control" id="startPeriod" value="@Model.StartPeriod?.ToString("yyyy-MM-dd")" />
                </div>
                <div class="form-group">
                    <label for="EndPeriod">End Period</label>
                    <input type="date" name="endPeriod" class="form-control" id="endPeriod" value="@Model.EndPeriod?.ToString("yyyy-MM-dd")" />
                </div>
                </div>
            <div style="display:flex; gap:10px;">

                    <button type="submit" class="saveButton">Filter</button>
                    <button type="reset" class="saveButton" onclick="clearFilters()">Clear</button>
</div>
        </form>
    </div>
</div>

<script>
    function toggleFilterForm() {
        const tableFilterContainer = document.getElementById('table-filter-container');
        const tableFilterContainerParent = document.getElementById('table-filter-container-parent');
        const body = document.body;

        if (tableFilterContainer.classList.contains('show') && tableFilterContainerParent.classList.contains('show')) {
            tableFilterContainer.classList.remove('show');
            tableFilterContainerParent.classList.remove('show');
            body.style.overflow = '';
        } else {
            tableFilterContainer.classList.add('show');
            tableFilterContainerParent.classList.add('show');
            body.style.overflow = 'hidden';
        }
    }
    $(document).ready(function () {
        $('#organizationFilter').on('change', function () {
            var organizationName = $(this).val();
            var filterSource = $('#filterSource').val(); // get the selected filter source
            var locationDropdown = $('#locationFilter');
            var endpoint = '';

            // decide which endpoint to call based on filter source
            switch (filterSource) {
                case 'contribution':
                    endpoint = '/DetailsView/GetContributionLocations';
                    break;
                case 'return':
                    endpoint = '/DetailsView/GetReturnLocations';
                    break;
                case 'bocw':
                    endpoint = '/DetailView/GetBOCWLocations';
                    break;
                default:
                    endpoint = '/DetailsView/GetLocations';
            }

            // make the AJAX request
            $.get(endpoint, { organizationName: organizationName }, function (data) {
                locationDropdown.empty();
                locationDropdown.append('<option value="">-- Select Location --</option>');

                $.each(data, function (index, location) {
                    locationDropdown.append('<option value="' + location + '">' + location + '</option>');
                });
            });
        });
    });

 

    // storing data in form
    function getQueryParam(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }

    document.addEventListener("DOMContentLoaded", function () {
        const fields = [
            "organizationName",
            "LocationName",
            "Statename",
            "CityName",
            "startDueDate",
            "endDueDate",
            "startPeriod",
            "endPeriod"
        ];

        fields.forEach(function (fieldName) {
            const value = getQueryParam(fieldName);
            if (value !== null) {
                const element = document.getElementsByName(fieldName)[0];
                if (element) {
                    element.value = value;
                }
            }
        });
    });

    function clearFilters() {
        const form = document.querySelector('.table-filter-container form');
        form.reset();

        const locationDropdown = document.getElementById('locationFilter');
        if (locationDropdown) {
            locationDropdown.innerHTML = '<option value="">Select a Site</option>';
        }

        const cityDropdown = document.getElementById('CityFilter');
        if (cityDropdown) {
            cityDropdown.innerHTML = '<option value="">Select a City</option>';
        }

        const stateDropdown = document.getElementById('StateFilter');
        if (stateDropdown) {
            stateDropdown.value = '';
        }

        const dateFields = [
            'startDueDate',
            'endDueDate',
            'startPeriod',
            'endPeriod'
        ];

        dateFields.forEach(id => {
            const input = document.querySelector(`input[name="${id}"]`);
            if (input) {
                input.value = '';
                input.defaultValue = '';
            }
        });

        // Optionally clear URL query string
        if (window.history.replaceState) {
            const cleanUrl = window.location.origin + window.location.pathname;
            window.history.replaceState({}, document.title, cleanUrl);
        }
    }

</script>