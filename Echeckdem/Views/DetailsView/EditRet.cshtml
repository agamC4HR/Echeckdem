@using Echeckdem.ViewModel
@using Echeckdem.ViewModel.ComplianceTracker
@model ReturnsViewModel
@{
    ViewData["Title"] = "Edit Category";
    ViewData["Heading"] = "Edit Return - <span style='font-weight:normal;'>NAAM</span>";
    ViewData["Heading_child"] = "<strong>Location:</strong> FPLCSPL - Pune  | <strong>City:</strong> Pune | <strong>State:</strong> Maharashtra | <strong>Description:</strong> Professional Tax | <strong>Last Date:</strong> 31-5-2025";
}

<style>

    .form-container {
        width: 98vw;
        margin-top: 45px;
        padding: 15px;
        background-color: #ffffff;
        border-radius: .375rem;
        margin-left: 7px;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 15px;
    }

    .form-field {
        flex: 1;
        min-width: 200px;
    }

        .form-field label {
            font-weight: bold;
            font-size: 12px;
            color: #333;
            margin-bottom: 5px;
            display: block;
        }

        .form-field input,
        .form-field select,
        .form-field textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 12px;
            background-color: #fff;
        }

            .form-field input:focus,
            .form-field select:focus,
            .form-field textarea:focus {
                border-color: #007bff;
                outline: none;
            }

    textarea {
        height: 150px;
        resize: vertical;
    }


    .view-pdf-link {
        color: #0066cc;
        text-decoration: none;
        font-weight: bold;
        justify-content: flex-start;
        margin-top: -10px;
        padding: 0;
    }

        .view-pdf-link:hover {
            color: #004d99;
            text-decoration: underline;
        }

    .required-field::after {
        content: " *";
        color: red;
    }

</style>

<form asp-action="AddOrUpdateRet" asp-controller="DetailsView" method="post" enctype="multipart/form-data" class="form-container" id="returnsForm">
    <input type="hidden" asp-for="oid" />
    <input type="hidden" asp-for="Rtid" />
    <input type="hidden" asp-for="Lcode" />

    <div class="form-row">
        <div class="form-field" style="flex: 1 1 100%;">
            <label class="required-field">Status:</label>
            <select asp-for="Status" class="form-control" asp-items="Model.StatusOptions" id="statusSelect" required>
                <option value="">-- Select Status --</option>
            </select>
        </div>
    </div>

    <div class="form-row">
        <div class="form-field">
            <label id="lastDateLabel">Last Date:</label>
            <input type="date" asp-for="LastDate" class="form-control" id="lastDateInput" />
        </div>
        <div class="form-field">
            <label id="depDateLabel">Date of Deposit:</label>
            <input type="date" asp-for="Depdate" class="form-control" id="depDateInput" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-field" style="flex: 1 1 100%;">
            <label id="remarksLabel">Remarks:</label>
            <textarea asp-for="Remarks" class="form-control" id="remarksTextarea"></textarea>
        </div>
    </div>
    <div class="form-row">
        <div class="form-field" style="flex: 1 1 100%;">
            <label id="fileLabel">Upload File (PDF only):</label>
            <input type="file" name="file" class="form-control" accept="application/pdf" id="fileInput" />
        </div>
    </div>
    @if (!string.IsNullOrEmpty(Model.Filename))
    {
        <div class="form-row">
            <div class="form-field" style="flex: 1 1 100%;">
                <label>Currently Uploaded File:</label><br />
                <a href="@Url.Action("Open_file", "DetailsView", new { tp = "RET", nm = Model.Filename, oid = Model.oid })"
                   target="_blank"
                   class="view-pdf-link">
                    View PDF in New Tab
                </a>
            </div>
        </div>
    }

    <button type="submit" class="saveButton">Save Changes</button>
    <button type="button" class="saveButton" onclick="window.location.href='/DetailsView/CombinedDetailed'">Cancel</button>
</form>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const statusSelect = document.getElementById('statusSelect');
            const form = document.getElementById('returnsForm');
            const depDateInput = document.getElementById('depDateInput');
            const lastDateInput = document.getElementById('lastDateInput');
            const remarksTextarea = document.getElementById('remarksTextarea');
            const remarksLabel = document.getElementById('remarksLabel');

            // Set date constraints for Date of Deposit
            function setDateConstraints() {
                const today = new Date();
                const fiveDaysAgo = new Date();
                fiveDaysAgo.setDate(today.getDate() - 4);

                // Format dates as YYYY-MM-DD (required by date input)
                const formatDate = (date) => {
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const day = String(date.getDate()).padStart(2, '0');
                    return `${year}-${month}-${day}`;
                };

                depDateInput.max = formatDate(today);
                depDateInput.min = formatDate(fiveDaysAgo);

                // If the current value is outside the range, reset it to today
                if (depDateInput.value) {
                    const selectedDate = new Date(depDateInput.value);
                    if (selectedDate < fiveDaysAgo || selectedDate > today) {
                        depDateInput.value = formatDate(today);
                    }
                }
            }

            // Check if remarks should be required based on dates
            function checkRemarksRequired() {
                if (!depDateInput.value || !lastDateInput.value) return false;

                const depositDate = new Date(depDateInput.value);
                const lastDate = new Date(lastDateInput.value);

                return depositDate > lastDate;
            }

            // Update remarks field requirement
            function updateRemarksRequirement() {
                const isRemarksRequired = checkRemarksRequired();
                remarksTextarea.required = isRemarksRequired;

                if (isRemarksRequired) {
                    remarksLabel.classList.add('required-field');
                } else {
                    remarksLabel.classList.remove('required-field');
                }
            }

            // Fields that should be required only when status is "Compliant"
            const fieldsToToggle = [
                'lastDateInput', 'depDateInput', 'fileInput'
            ];

            const labelsToToggle = [
                'lastDateLabel', 'depDateLabel', 'fileLabel'
            ];

            // Function to toggle required fields
            function toggleRequiredFields() {
                const isCompliant = statusSelect.value === '1';

                fieldsToToggle.forEach(fieldId => {
                    const field = document.getElementById(fieldId);
                    if (field) {
                        field.required = isCompliant;
                    }
                });

                labelsToToggle.forEach(labelId => {
                    const label = document.getElementById(labelId);
                    if (label) {
                        if (isCompliant) {
                            label.classList.add('required-field');
                        } else {
                            label.classList.remove('required-field');
                        }
                    }
                });

                // Handle remarks separately based on dates
                if (isCompliant) {
                    updateRemarksRequirement();
                } else {
                    remarksTextarea.required = false;
                    remarksLabel.classList.remove('required-field');
                }
            }

            // Initialize everything
            setDateConstraints();
            toggleRequiredFields();

            // Event listeners
            statusSelect.addEventListener('change', toggleRequiredFields);
            depDateInput.addEventListener('change', function () {
                if (statusSelect.value === '1') {
                    updateRemarksRequirement();
                }
            });
            lastDateInput.addEventListener('change', function () {
                if (statusSelect.value === '1') {
                    updateRemarksRequirement();
                }
            });

            form.addEventListener('submit', function (e) {
                if (statusSelect.value === '1') {
                    let isValid = true;

                    // Check standard required fields
                    fieldsToToggle.forEach(fieldId => {
                        const field = document.getElementById(fieldId);
                        if (!field) return;

                        // Handle file input specifically
                        if (field.type === "file") {
                            if (field.files.length === 0) {
                                isValid = false;
                                field.style.borderColor = 'red';
                            } else {
                                field.style.borderColor = '#ccc';
                            }
                        } else {
                            if (!field.value || field.value.trim() === "") {
                                isValid = false;
                                field.style.borderColor = 'red';
                            } else {
                                field.style.borderColor = '#ccc';
                            }
                        }
                    });

                    // Check date range for deposit date
                    if (depDateInput.value) {
                        const selectedDate = new Date(depDateInput.value);
                        const today = new Date();
                        const fiveDaysAgo = new Date();
                        fiveDaysAgo.setDate(today.getDate() - 5);

                        if (selectedDate < fiveDaysAgo || selectedDate > today) {
                            isValid = false;
                            depDateInput.style.borderColor = 'red';
                            alert('Date of Deposit must be within the last 5 days including today.');
                        }
                    }

                    // Check if remarks are required and filled
                    if (checkRemarksRequired() && !remarksTextarea.value.trim()) {
                        isValid = false;
                        remarksTextarea.style.borderColor = 'red';
                        remarksLabel.classList.add('required-field');
                        alert('Remarks are required when Date of Deposit is after Last Date.');
                    } else {
                        remarksTextarea.style.borderColor = '#ccc';
                    }

                    if (!isValid) {
                        e.preventDefault();
                    }
                }
            });
        });
    </script>
}