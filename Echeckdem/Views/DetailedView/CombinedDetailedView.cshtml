@model CombinedDetailedViewModel

@{
    ViewData["Title"] = "Detailed Report";
    ViewData["Heading"] = "Detailed Report";
    ViewData["Heading_child"] = "Comprehensive labor compliance insights and actions.";
}


    




<partial name="_FilterForm" model="Model" />

<style>


            .styled-table th:nth-child(1) { /* S.No. */
                width: 4%;
            }

            .styled-table th:nth-child(2) {
                width: 15%;
            }

            .styled-table th:nth-child(5) { /* Site */
                width: 150px;
            }

            .styled-table th:nth-child(6) { /* Period */
                width: 9%;
            }

            .styled-table th:nth-child(7) { /* Due Date */
                width: 9%;
            }

            .styled-table th:nth-child(8) { /* Status */
                width: 10%;
            }

            .styled-table th:nth-child(9) { /* Date of Deposit/Renewal */
                width: 7%;
            }

            .styled-table th:nth-child(10) { /* City */
                width: 120px;
            }

            .styled-table th:nth-child(11) { /* State */
                width: 120px;
            }

            .styled-table th:nth-child(12) { /* Region */
                width: 120px;
            }



    .highlight {
        background-color: yellow;
        color: black;
    }

    
</style>
<div class="table-heading-container">
    
    <!-- Search bar -->
    <input type="text" id="searchBar" placeholder="Search..." class="table-search-input" onkeyup="searchTable()">

    <!-- Download button -->
    

    <button class="table-export-btn" onclick="downloadData()">
        EXPORT
    </button>
  

    <!-- Outer-Filter button -->
    <div class="table-filter-buttons">
        <button class="table-filter-btn active" onclick="filterTable('all')">All</button>
        <button class="table-filter-btn" onclick="filterTable('registration')">Registration</button>
        <button class="table-filter-btn" onclick="filterTable('payroll')">Payroll</button>
        <button class="table-filter-btn" onclick="filterTable('return')">Return</button>
    </div>
</div>


<div class="table-container">
    <table class="styled-table">
        <thead>
            <tr>
                <th>S.No.</th>
                <th>Organization Name</th>
                <th>Category</th>
                <th>Type</th>
                <th>Site</th>
                <th>Period</th>
                <th>Due Date</th>
                <th>Status</th>
                <th>Date of Deposit/Renewal</th>
                <th>City</th>
                <th>State</th>
                <th>Region</th>
                @* <th>Form</th> *@
            </tr>
        </thead>
        <tbody>
            @{
                int sno = 1; 
            }
            @foreach (var registration in Model.Registrations)
            {
                <tr class="registration-row">
                    <td>@sno</td>
                    <td>@registration.OName</td>
                    <td>Registrations</td>
                    <td>@registration.TP</td>
                    <td>@registration.Lname</td>
                    <td>N/A</td>
                    <td>@registration.Doe?.ToString("dd MMM yyyy")</td>
                    <td>@registration.GetStatusDescription()</td>
                    <td></td>
                    <td>@registration.LCity</td>
                    <td>@registration.State</td>
                    <td>@registration.LRegion</td>
                    @* <td></td> <!-- Empty for Registrations --> *@
                </tr>
                sno++;
            }
            @foreach (var contribution in Model.Contributions)
            {
                <tr class="payroll-row">
                    <td>@sno</td>
                    <td>@contribution.OName</td>
                    <td>Payroll</td> 
                    <td>@contribution.TP</td>
                    <td>@contribution.Lname</td>
                    <td>@contribution.FormattedPeriod</td>
                    <td>@contribution.LastDate?.ToString("dd MMM yyyy")</td>
                    <td>@contribution.GetStatusDescription()</td>
                    <td>@contribution.Depdate?.ToString("dd MMM yyyy")</td>
                    <td>@contribution.LCity</td>
                    <td>@contribution.State</td>
                    <td>@contribution.LRegion</td>
                    @* <td></td> <!-- Empty for Contributions --> *@
                </tr>
                sno++;
            }
            @foreach (var returnData in Model.Returns)
            {
                <tr class="return-row">
                    <td>@sno</td>
                    <td>@returnData.OName</td>
                    <td>Returns</td>
                    <td>@returnData.RTitle</td>
                    <td>@returnData.Lname</td>
                    <td>@returnData.Period?.ToString("MMMM yyyy")</td>
                    <td>@returnData.LastDate?.ToString("dd MMM yyyy")</td>
                    <td>@returnData.GetStatusDescription()</td>
                    <td>@returnData.Depdate?.ToString("dd MMM yyyy")</td>
                    <td>@returnData.LCity</td>
                    <td>@returnData.State</td>
                    <td>@returnData.LRegion</td>
                    @*  <td>@returnData.RForm</td>  *@
                </tr>
                sno++;
            }
        </tbody>
    </table>
</div>

<script>
    function filterTable(type) {
        const allRows = document.querySelectorAll("tbody tr");
        const registrationRows = document.querySelectorAll(".registration-row");
        const payrollRows = document.querySelectorAll(".payroll-row");
        const returnRows = document.querySelectorAll(".return-row");

        // Show or hide rows based on the selected filter type
        if (type === "all") {
            allRows.forEach(row => row.style.display = "table-row");
            updateSerialNumbers(allRows);
        } else if (type === "registration") {
            registrationRows.forEach(row => row.style.display = "table-row");
            payrollRows.forEach(row => row.style.display = "none");
            returnRows.forEach(row => row.style.display = "none");
            updateSerialNumbers(registrationRows);
        } else if (type === "payroll") {
            registrationRows.forEach(row => row.style.display = "none");
            payrollRows.forEach(row => row.style.display = "table-row");
            returnRows.forEach(row => row.style.display = "none");
            updateSerialNumbers(payrollRows);
        } else if (type === "return") {
            registrationRows.forEach(row => row.style.display = "none");
            payrollRows.forEach(row => row.style.display = "none");
            returnRows.forEach(row => row.style.display = "table-row");
            updateSerialNumbers(returnRows);
        }

        // Update active button
        document.querySelectorAll(".table-filter-btn").forEach(btn => btn.classList.remove("active"));
        document.querySelector(`.table-filter-btn[onclick="filterTable('${type}')"]`).classList.add("active");
    }

    function updateSerialNumbers(rows) {
        rows.forEach((row, index) => {
            const serialCell = row.cells[0]; // Assuming the first cell is for the serial number
            serialCell.textContent = index + 1; // Update serial number based on index
        });
    }

    function toggleForm() {
        const tableFilterContainer = document.getElementById('table-filter-container');
        const tableFilterContainerParent = document.getElementById('table-filter-container-parent');
        const body = document.body;

        if (tableFilterContainer.classList.contains('show') && tableFilterContainerParent.classList.contains('show')) {
            tableFilterContainer.classList.remove('show');
            tableFilterContainerParent.classList.remove('show');
            body.style.overflow = '';
        } else {
            tableFilterContainer.classList.add('show');
            tableFilterContainerParent.classList.add('show');
            body.style.overflow = 'hidden';
        }
    }


    function searchTable() {
        const input = document.getElementById('searchBar');
        const filter = input.value.toLowerCase();
        const rows = document.querySelectorAll('.styled-table tbody tr');

        rows.forEach(row => {
            let textContent = row.textContent || row.innerText;
            if (textContent.toLowerCase().includes(filter)) {
                row.style.display = "";  // Show the row
                highlightText(row, filter);  // Highlight the matched text
            } else {
                row.style.display = "none";  // Hide the row
                removeHighlight(row);  // Remove previous highlights
            }
        });
    }

    function highlightText(row, filter) {
        // Clear any previous highlights
        removeHighlight(row);

        const regex = new RegExp(`(${filter})`, 'gi');  // Create a case-insensitive regex for the filter
        row.innerHTML = row.innerHTML.replace(regex, '<span class="highlight">$1</span>');  // Wrap matched text in a span with a highlight class
    }

    function removeHighlight(row) {
        // Remove any previous highlights
        row.innerHTML = row.innerHTML.replace(/<span class="highlight">(.*?)<\/span>/gi, '$1');
    }

    // function downloadData() {
    //     const table = document.querySelector('.styled-table');
    //     let rows = table.querySelectorAll('tr');
    //     let csv = [];

    //     rows.forEach(row => {
    //         const rowData = [];
    //         row.querySelectorAll('th, td').forEach(cell => {
    //             rowData.push(cell.textContent);
    //         });
    //         csv.push(rowData.join(','));
    //     });

    //     const csvFile = new Blob([csv.join('\n')], { type: 'text/csv' });
    //     const link = document.createElement('a');
    //     link.href = URL.createObjectURL(csvFile);
    //     link.download = 'table-data.csv';
    //     link.click();
    // }
</script>
