@model CombinedDetailedViewModel

@{
    ViewData["Title"] = "Detailed Report";
    ViewData["Heading"] = "Detailed Report";
    ViewData["Heading_child"] = "Comprehensive Labor Compliance Insights and Actions.";
}


<partial name="_FilterForm" model="Model" />

<style>
            .styled-table th:nth-child(1) { /* S.No. */
                width: 4%;
            }

            .styled-table th:nth-child(2) {
                width: 15%;
            }

            .styled-table th:nth-child(5) { /* Site */
                width: 150px;
            }

            .styled-table th:nth-child(6) { /* Period */
                width: 9%;
            }

            .styled-table th:nth-child(7) { /* Due Date */
                width: 9%;
            }

            .styled-table th:nth-child(8) { /* Status */
                width: 10%;
            }

            .styled-table th:nth-child(9) { /* Date of Deposit/Renewal */
                width: 7%;
            }

            .styled-table th:nth-child(10) { /* City */
                width: 120px;
            }

            .styled-table th:nth-child(11) { /* State */
                width: 120px;
            }

            .styled-table th:nth-child(12) { /* Region */
                width: 120px;
            }



    .highlight {
        background-color: yellow;
        color: black;
    }

    .view-pdf-link {
        color: #0066cc; 
        text-decoration: none; 
        font-weight: bold; 
    }

        .view-pdf-link:hover {
            color: #004d99;
            text-decoration: underline; 
        }



    
</style>
<div class="table-heading-container">
    
    <!-- Search bar -->
    <input type="text" id="searchBar" placeholder="Search..." class="table-search-input" onkeyup="searchTable()">

    <!-- Outer-Filter button -->
    <div class="table-filter-buttons">
        <button class="table-filter-btn active" onclick="filterTable('all')">All</button>
        <button class="table-filter-btn" onclick="filterTable('registration')">Registration</button>
        <button class="table-filter-btn" onclick="filterTable('payroll')">Payroll</button>
        <button class="table-filter-btn" onclick="filterTable('return')">Return</button>
        <button class="table-filter-btn" onclick="filterTable('bocw')">BOCW</button>
    </div>
</div>


<div class="table-container-detailsView">
    <table class="styled-table">
        <thead>
            <tr>
                <th>S.No.</th>
                <th>Organization Name</th>
                <th>Site Name</th>
                <th>Service Category</th>
                <th>Services</th>
                <th>Period</th>
                <th>Due Date</th>
                <th>Status</th>
                <th>Completion Date</th>
                <th>City</th>
                <th>State</th>
                <th>Region</th>
                <th>FILE</th>
                <th>Edit</th>
                @* <th>Form</th> *@
            </tr>
        </thead>
        <tbody>
            @{
                int sno = 1; 
            }
            @foreach (var registration in Model.Registrations)
            {
                <tr class="registration-row">
                    <td>@sno</td>
                    <td>@registration.OName</td>
                    <td>@registration.Lname</td>
                    <td>Registrations</td>
                    <td>@registration.TP</td>
                    <td>N/A</td>
                    <td>@registration.Doe?.ToString("dd MMM yyyy")</td>
                    <td>@registration.GetStatusDescription()</td>
                    <td></td>
                    <td>@registration.LCity</td>
                    <td>@registration.State</td>
                    <td>@registration.LRegion</td>
                    <td>
                        @if (!string.IsNullOrEmpty(registration.Filename))
                        {
                            <a href="@Url.Action("Open_file", "DetailsView", new { tp = "REG", nm = registration.Filename, oid = registration.Oid })"
                               target="_blank"
                               class="view-pdf-link">
                                View FILE
                            </a>
                        }   
                        else
                        {
                            <span>No file uploaded</span>
                        }
                    </td>

                    <td><a href="@Url.Action("EditReg", "DetailsView", new {uid = registration.Uid, oid = registration.Oid, lcode = registration.Lcode })" class="edit-btn">   <i class="fas fa-pen edit-icon" style="color: #dd3432; font-size: 14px; cursor: pointer;"></i></a></td>
                    @* <td></td> <!-- Empty for Registrations --> *@
                </tr>
                sno++;
            }
            @foreach (var contribution in Model.Contributions)
            {
                <tr class="payroll-row">
                    <td>@sno</td>
                    <td>@contribution.OName</td>
                    <td>@contribution.Lname</td>
                    <td>Payroll</td> 
                    <td>@contribution.TP</td>
                    <td>@contribution.FormattedPeriod</td>
                    <td>@contribution.LastDate?.ToString("dd MMM yyyy")</td>
                    <td>@contribution.GetStatusDescription()</td>
                    <td>@contribution.Depdate?.ToString("dd MMM yyyy")</td>
                    <td>@contribution.LCity</td>
                    <td>@contribution.State</td>
                    <td>@contribution.LRegion</td>
                    @* <td></td> <!-- Empty for Contributions --> *@
                    <td>
                        @if (!string.IsNullOrEmpty(contribution.Filename))
                        {
                            <a href="@Url.Action("Open_file", "DetailsView", new { tp = "CONTR", nm = contribution.Filename, oid = contribution.oid})"
                               target="_blank"
                               class="view-pdf-link">
                                View FILE
                            </a>
                        }
                        else
                        {
                            <span>No file uploaded</span>
                        }
                    </td>
                    <td><a href="@Url.Action("EditContr", "DetailsView", new {contid = contribution.Contid, oid = contribution.oid, lcode = contribution.Lcode })" class="edit-btn">   <i class="fas fa-pen edit-icon" style="color: #dd3432; font-size: 14px; cursor: pointer;"></i></a></td>
                    @* <td></td> <!-- Empty for Registrations --> *@
                </tr>
              
                sno++;
            }
            @foreach (var returnData in Model.Returns)
            {
                <tr class="return-row">
                    <td>@sno</td>
                    <td>@returnData.OName</td>
                    <td>@returnData.Lname</td>
                    <td>Returns</td>
                    <td>@returnData.RTitle</td>
                    <td>@returnData.Period?.ToString("MMMM yyyy")</td>
                    <td>@returnData.LastDate?.ToString("dd MMM yyyy")</td>
                    <td>@returnData.GetStatusDescription()</td>
                    <td>@returnData.Depdate?.ToString("dd MMM yyyy")</td>
                    <td>@returnData.LCity</td>
                    <td>@returnData.State</td>
                    <td>@returnData.LRegion</td>
                    <td>
                        @if (!string.IsNullOrEmpty(returnData.Filename))
                        {
                            <a href="@Url.Action("Open_file", "DetailsView", new { tp = "RET", nm = returnData.Filename, oid = returnData.oid})"
                               target="_blank"
                               class="view-pdf-link">
                                View FILE
                            </a>
                        }
                        else
                        {
                            <span>No file uploaded</span>
                        }
                    </td>
                    <td><a href="@Url.Action("EditRet", "DetailsView", new {rtid = returnData.Rtid, oid = returnData.oid, lcode = returnData.Lcode })" class="edit-btn">   <i class="fas fa-pen edit-icon" style="color: #dd3432; font-size: 14px; cursor: pointer;"></i></a></td>
                    @*  <td>@returnData.RForm</td>  *@

                </tr>
                sno++;
            }
            @foreach (var bocw in Model.BOCW)
            {
                <tr class="bocw-row">
                <td>@sno</td>
                <td>@bocw.OName</td>
                <td>@bocw.Lname</td>
                <td>BOCW</td>
                <td>@bocw.Task</td>
                <td>N/A</td>
                    <td>@bocw.DueDate?.ToString("dd MMM yyyy")</td>
                <td>@bocw.GetStatusDescription()</td>
                @* <td>@bocw.CreateDate?.ToString("dd MMM yyyy")</td> *@
                    <td>@bocw.CompletionDate?.ToString("dd MMM yyyy")</td>
                <td>@bocw.LCity</td>
                <td>@bocw.State</td>
                <td>@bocw.LRegion</td>
                
                    <td>
                        @if (!string.IsNullOrEmpty(bocw.Filename))
                        {
                            <a href="@Url.Action("Open_file", "DetailsView", new { tp = "BOCW", nm = bocw.Filename, oid = bocw.oid})"
                               target="_blank"
                               class="view-pdf-link">
                                View FILE
                            </a>
                        }
                        else
                        {
                            <span>No file uploaded</span>
                        }
                    </td>
                    <td><a href="@Url.Action("EditBocw", "DetailsView", new {transactionID = bocw.TransactionID, lcode = bocw.Lcode })" class="edit-btn">   <i class="fas fa-pen edit-icon" style="color: #dd3432; font-size: 14px; cursor: pointer;"></i></a></td>


                </tr>
                sno++;
            }
        </tbody>
    </table>
</div>

<script>
    function filterTable(type) {
        const allRows = document.querySelectorAll("tbody tr");
        const registrationRows = document.querySelectorAll(".registration-row");
        const payrollRows = document.querySelectorAll(".payroll-row");
        const returnRows = document.querySelectorAll(".return-row");
        const bocwRows = document.querySelectorAll(".bocw-row");

        // Show or hide rows based on the selected filter type
        if (type === "all") {
            allRows.forEach(row => row.style.display = "table-row");
            updateSerialNumbers(allRows);
        } else if (type === "registration") {
            registrationRows.forEach(row => row.style.display = "table-row");
            payrollRows.forEach(row => row.style.display = "none");
            returnRows.forEach(row => row.style.display = "none");
            bocwRows.forEach(row => row.style.display = "none");
            updateSerialNumbers(registrationRows);
        } else if (type === "payroll") {
            registrationRows.forEach(row => row.style.display = "none");
            payrollRows.forEach(row => row.style.display = "table-row");
            returnRows.forEach(row => row.style.display = "none");
            bocwRows.forEach(row => row.style.display = "none");
            updateSerialNumbers(payrollRows);
        } else if (type === "return") {
            registrationRows.forEach(row => row.style.display = "none");
            payrollRows.forEach(row => row.style.display = "none");
            returnRows.forEach(row => row.style.display = "table-row");
            bocwRows.forEach(row => row.style.display = "none");
            updateSerialNumbers(returnRows);
        } else if (type === "bocw") {
            registrationRows.forEach(row => row.style.display = "none");
            payrollRows.forEach(row => row.style.display = "none");
            returnRows.forEach(row => row.style.display = "none");
            bocwRows.forEach(row => row.style.display = "table-row");
            updateSerialNumbers(bocwRows);
        }
        // Update active button
        document.querySelectorAll(".table-filter-btn").forEach(btn => btn.classList.remove("active"));
        document.querySelector(`.table-filter-btn[onclick="filterTable('${type}')"]`).classList.add("active");
    }


    function updateSerialNumbers(rows) {
        rows.forEach((row, index) => {
            const serialCell = row.cells[0]; 
            serialCell.textContent = index + 1; 
        });
    }

    function toggleForm() {
        const tableFilterContainer = document.getElementById('table-filter-container');
        const tableFilterContainerParent = document.getElementById('table-filter-container-parent');
        const body = document.body;

        if (tableFilterContainer.classList.contains('show') && tableFilterContainerParent.classList.contains('show')) {
            tableFilterContainer.classList.remove('show');
            tableFilterContainerParent.classList.remove('show');
            body.style.overflow = '';
        } else {
            tableFilterContainer.classList.add('show');
            tableFilterContainerParent.classList.add('show');
            body.style.overflow = 'hidden';
        }
    }


    function searchTable() {
        const input = document.getElementById('searchBar');
        const filter = input.value.trim().toLowerCase();
        const rows = document.querySelectorAll('.styled-table tbody tr');

        rows.forEach(row => {
            removeHighlight(row); // Clear previous highlights

            const rowText = row.textContent.toLowerCase();
            const match = rowText.includes(filter);

            row.style.display = match ? "" : "none";

            if (match && filter) {
                highlightText(row, filter);
            }
        });
    }

    function highlightText(row, filter) {
        const regex = new RegExp(`(${filter})`, 'gi');

        row.querySelectorAll('td').forEach(cell => {
            walkTextNodes(cell, node => {
                const value = node.nodeValue;
                if (regex.test(value)) {
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = value.replace(regex, '<span class="highlight">$1</span>');

                    const fragments = document.createDocumentFragment();
                    [...tempDiv.childNodes].forEach(n => fragments.appendChild(n));
                    node.parentNode.replaceChild(fragments, node);
                }
            });
        });
    }

    // Utility: Traverse only text nodes in a node
    function walkTextNodes(node, callback) {
        const walker = document.createTreeWalker(
            node,
            NodeFilter.SHOW_TEXT,
            null,
            false
        );
        let currentNode;
        while ((currentNode = walker.nextNode())) {
            callback(currentNode);
        }
    }


    function removeHighlight(row) {
        row.querySelectorAll('td').forEach(cell => {
            // Remove highlight spans while keeping other HTML intact
            const highlighted = cell.querySelectorAll('span.highlight');
            highlighted.forEach(span => {
                span.replaceWith(span.textContent);
            });
        });
    }


    function downloadData() {
        const table = document.querySelector('.styled-table');
        let rows = table.querySelectorAll('tr');
        let csv = [];

        rows.forEach(row => {
            const rowData = [];
            row.querySelectorAll('th, td').forEach(cell => {
                rowData.push(cell.textContent);
            });
            csv.push(rowData.join(','));
        });

        const csvFile = new Blob([csv.join('\n')], { type: 'text/csv' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(csvFile);
        link.download = 'table-data.csv';
        link.click();
    }
</script>


